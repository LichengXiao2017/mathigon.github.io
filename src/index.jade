extends _template

block vars
  - var id = 'home'
  - var title = 'Mathigon.io'
  - var subtitle = 'Discover the open source JavaScript libraries that power Mathigon. Combining functions for DOM manipulation, animations, events handling, UI elements and mathematics, they make web development for modern browsers fun and easy.'

block body

  p Mathigon.io is home to four different JavaScript libraries designed for high performance and fast development:

  ul
    li #[a(href='/core') core.js] is a collection of universal  helper functions and utility classes.
    li #[a(href='/fermat') fermat.js] contains efficient mathematics, statistics and geometry functions.
    li #[a(href='/boost') boost.js] simplified front end web development with DOM, event and animation utilities.
    li #[a(href='/slate') slate.js] is a collection of interactive web components.

  p While core.js and fermat.js can run in any environment, boost.js and slate.js require a browser.


  h3 Introduction

  p All libraries are written entirely in ES6. They are split into a few different modules which export public functions and classes. To use any one, you simply need to import it. 

  pre: code.language-javascript.
    import { tabulate, average } from 'arrays'
    import Matrix from 'matrix'

  p IDEs like WebStorm, we recommend marking the #[code src/] folder in every library as #[em resource root], so that dependencies are correctly resolved. If you want to create a single concatenated file for browsers, you can use tools like #[a(href="http://webpack.github.io") Webpack], #[a(href="http://browserify.org") Browserify] or #[a(href="http://jspm.io") jspm]. At Mathigon we use #[a(href="http://rollupjs.org") rollup.js] which runs #[em tree shaking] to remove all unused functions and classes. This significantly reduces the file size of the resulting bundle. You can see a Grunt-based example on #[a(href="https://github.com/Mathigon/mathigon.github.io/blob/source/grunt-rollup.js") GitHub].

  p For improved performance, very few of the functions perform argument checks or throw errors. If a function is called with incorrect arguments, the behaviour is undefined can could range from silent typecasting to unexpected errors. Where needed, the caller is responsible for checking that parameter match the types defined in this documentation.


  h3 Arrays

  p Mathigon.io contains various different functions for efficient array creation and manipulation.

  pre: code.language-javascript.
    tabulate(Math.random, 5);
      // [0.7068, 0.9314, 0.6050, 0.9042, 0.2278]

    flatten(tabulate((x, y) => '' + x + y, 3, 3));
      // ['00', '01', '02', '10', '11', '12', '20', '21', '22']

    map((x, y, z) => x + y + z, [1, 2, 3], [4, 5, 6], [7, 8, 9]);
      // [12, 15, 18]

    list(9).chunk(3);
      // [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

    subsets([1,2,3])
      // [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]

    permutations([4,5,6])
      //[[4,5,6], [4,6,5], [5,4,6], [5,6,4], [6,4,5], [6,5,4]]

  h3 Expressions and Mathematics

  p Fermat.js is able to parse complex mathematical expressions, including arbitrary functions, arrays and strings. When evaluating, you can pass in custom variables and functions.

  pre: code.language-javascript.
    let expr = Expression.parse('1 * (2 + x) - 4! + average([1, 2, x^2]) - (100 / 2)%');
    expr.evaluate({ x: 10, average });

  h3 Elements

  p boost.js contains a powerful wrapper class for DOM elements. You can use #[code $] and #[code $$] to select one or more dom elements on the current page, and #[code $N] and #[code $$N] to create new elements.

  pre: code.language-javascript.
    let $parent = $('.foo');
    let $child = $N('div', { class: '.bar', html: 'Hello' }, $parent);

    $child.on('click', function() { ... });
    $child.transform('scale(2)');

  h3 Events

  p Everything in Mathigon.io is based on events. Many classes inherit from #[code Evented] which supports basic #[code .on], #[code .one], #[code .off] and #[code .trigger] methods.

  p In addition to standard browser events, boost.js also supports a number of special events. The #[code click] event is overwritten to happen on <code>mouseup</code> or <code>touchend</code> to avoid delays on mobile devices. The <code>scroll</code>, <code>scrollStart</code> and <code>scrollEnd</code> events are fired for mouse and touch scrolling using <code>requestAnimationFrame</code>. Mathigon also simulates cross-platform pointer events.

  pre: code.language-javascript.
    $element.on('click', function() { console.log('click'); });
    $element.on('scroll', function({ top }) { console.log(top); });
    $element.on('pointerdown', function(e) { console.log(e.top); });

  h3 Animations

  p Boost.js contains a variety of element transitions, including <code>.enter()</code>, <code>.exit()</code>, and effects like <code>.pulsate()</code>. You can also define generic element animations which use CSS transition to animate any css properties. In particular, you can animate to and from <code>height: auto</code> and <code>width: auto</code>.

  pre: code.language-javascript.
    $el.fadeIn(200);
    $el.pulsate();
    $el.exit('fade', 300, 100);  // duration 300ms, delay 100ms

    $el.animate([
      { css: 'background', from: '#C00', to: '#0C0', duration: 500, timing: 'linear', delay: 200 },
      { css: 'width', to: '200px' }
    ]);

  p <code>animate()</code> is a wrapper for <code>requestAnimationFrame</code> that can be used to call a function at every step during an animation of fixed length, or indefinitely.

  pre: code.language-javascript.
    animate(function(prog, time) {
      $el.css(left, prog * 200 + 'px');
      $el.text(time + 's');
    }, 500);

  h3 Web Components

  p To use a web component in slate.js, you simply need to import the relevant module in your JavaScript entry point, even though you'll rarely used the imported class. The browser will automatically convert all corresponding tags, e.g. <code>&lt;x-dropdown&gt;&lt;/x-dropdown&gt;</code>.

  p Many components contain a Less stylesheet, which you similarly need to import in your styles entry point. Others contain a jade template file which similarly needs to be compiled and added at the top of your html.

  pre: code.language-javascript.
    &lt;!-- This is not a standard feature: you need to manually compile and insert templates. --&gt;
    &lt;link rel="import" href="slate.js/dropdown/template.js"&gt;
    &lt;x-dropdown&gt;Hello&lt;/x-dropdown&gt;

  pre: code.language-javascript.
    import XDropdown from 'dropdown'
    let $el = $('x-dropdown')

  pre: code.language-css.
    @import 'slate.js/src/dropdown/styles.less'

  p Instead, you can also define your own web components using `customElement()`.


  pre: code.language-css.
    import { $, customElement, $body } from 'elements';

    export default customElement('x-foo', {

      created: function($el) { ... },
      attached: function($el) { ... },
      detached: function($el) { ... },

      template: '&lt;div&gt;foo: &lt;content&gt;&lt;/content&gt;&lt;/div&gt;'
    });

  p Boost's custom elements don't use Shadow DOM, but you can use the Shadow DOM #[code &lt;content select=""&gt;] syntax in template strings. Tools like webpack allow you to write styles and templates in external files and insert them as strings in the compiled JavaScript file when building your application.


  h3 Roadmap

  ul
    li Update special events (click, scroll and pointerMove) to allow removing of events.
    li Improve performance of events, elements and web components using new browser APIs.
    li Complete the geometry module, allowing arbitrary intersection, projections of geometric objects.
    li Improve expression parsing, simplification and evaluation
    li Complete Bignum library that can handle arbitrarily large integers, arbitrarily accurate decimals and exact fractions. Update all mathematical functions to seamlessly handle Bignum and native `Number` inputs.
    li Create a new SVG library that integrates with the existing geometry, animation and events functions.


  h3 Contributing

  p To contribute code, please fork our GitHub repository and send us a pull request. If you find bugs or mistakes in Mathigon JS, please <a href="mailto:dev@mathigon.org">email us</a> with details on how to reproduce them.


  .row.social-buttons.padded-thin
    div
      .fb-share-button(data-href="http://mathigon.io", data-type="button_count")
    div
      a.twitter-share-button(href="https://twitter.com/share", data-url="http://mathigon.io", data-text="Textbooks come to Life", data-via="MathigonProject", data-hashtags="Mathigon")
    div
      .g-plus(data-action="share", data-annotation="bubble")
    div
      iframe(src="https://ghbtns.com/github-btn.html?user=Mathigon&type=follow", frameborder="0", scrolling="0", width="130px", height="20px")


  footer © 2016 Mathigon, #[a(href="https://github.com/Mathigon/core.js/blob/master/LICENSE") MIT License]

block scripts
  script(src="/vendor/prism.js")
  script(async, defer, src="//connect.facebook.net/en_US/all.js#xfbml=1")
  script(async, defer, src="//apis.google.com/js/platform.js")
  script(async, defer, src="//platform.twitter.com/widgets.js")
